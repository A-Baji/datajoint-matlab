% dj.internal.External - an external static method class.
classdef External
    methods (Static)
        function config = buildConfig(config, validation_config, store_name)
            function validateInput(address, target)
                for k=1:numel(fieldnames(target))
                    fn = fieldnames(target);
                    address{end+1} = '.';
                    address{end+1} = fn{k};
                    if ~isstruct(target.(fn{k}))
                        subscript = substruct(address{:});
                        try
                            value = subsref(config, subscript);
                            vconfig = subsref(validation_config, subscript);
                            type_check = vconfig.type_check;
                            if ~type_check(value)
                                % Throw error for config that fails type validation
                                error('DataJoint:StoreConfig:WrongType', ...
                                    'Unexpected type `%s` for config `%s` in store `%s`. Expecting `%s`.', class(value), strjoin(address, ''), store_name, char(type_check));
                            end
                        catch ME
                            if strcmp(ME.identifier,'MATLAB:nonExistentField')
                                % Throw error for extra config
                                error('DataJoint:StoreConfig:ExtraConfig', ...
                                    'Unexpected additional config `%s` specified in store `%s`.', strjoin(address, ''), store_name);
                            else
                                rethrow(ME);
                            end
                        end
                    else
                        validateInput(address, target.(fn{k}));
                    end
                    address(end) = [];
                    address(end) = [];
                end
            end
            function validateConfig(address, target)
                for k=1:numel(fieldnames(target))
                    fn = fieldnames(target);
                    address{end+1} = '.';
                    address{end+1} = fn{k};
                    if any(strcmp('required',fieldnames(target)))
                        address(end) = [];
                        address(end) = [];
                        subscript = substruct(address{:});
                        vconfig = subsref(validation_config, subscript);
                        required = vconfig.required;
                        try
                            value = subsref(config, subscript);
                        catch ME
                            if required && strcmp(ME.identifier,'MATLAB:nonExistentField')
                                % Throw error for required config
                                error('DataJoint:StoreConfig:MissingRequired', ...
                                    'Missing required config `%s` in store `%s`.', strjoin(address, ''), store_name);
                            elseif strcmp(ME.identifier,'MATLAB:nonExistentField')
                                % Set default for optional config
                                default = vconfig.default;
                                config = subsasgn(config, subscript, default);
                            end
                        end
                        break;
                    else
                        validateConfig(address, target.(fn{k}));
                    end
                    address(end) = [];
                    address(end) = [];
                end
            end

            validateInput({}, config);
            validateConfig({}, validation_config);
        end
        function store_targets = test()
            % test correct multi
            c = struct('local', ...
                    struct('store_config', ...
                        struct(...
                            'protocol', 'file', ...
                            'location', '/tmp/raphael'...
                        ), 'type_config', ...
                        struct(...
                            'blob', struct(...
                                'subfolding', [3,4], ...
                                'cache', '/tmp/cache'...
                            )...
                        )...
                    ), ...
                'remote', ...
                    struct('store_config', ...
                        struct(...
                            'protocol', 'file', ...
                            'location', '/tmp/john'...
                        )...
                    )...
            );
        
%             % test incorrect string used
%             c = struct('local', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', "file", ...
%                             'location', '/tmp/raphael'...
%                         ), 'type_config', ...
%                         struct(...
%                             'blob', struct(...
%                                 'subfolding', [3,4], ...
%                                 'cache', '/tmp/cache'...
%                             )...
%                         )...
%                     ), ...
%                 'remote', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', '/tmp/john'...
%                         )...
%                     )...
%             );

            % % test store not exists
%             c = struct('local', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', '/tmp/raphael'...
%                         ), 'type_config', ...
%                         struct(...
%                             'blob', struct(...
%                                 'subfolding', [3,4], ...
%                                 'cache', '/tmp/cache'...
%                             )...
%                         )...
%                     ), ...
%                 'remote', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 's3', ...
%                             'location', '/tmp/john'...
%                         )...
%                     )...
%             );

            % % no required config
%             c = struct('local', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', '/tmp/raphael'...
%                         ), 'type_config', ...
%                         struct(...
%                             'blob', struct(...
%                                 'subfolding', [3,4], ...
%                                 'cache', '/tmp/cache'...
%                             )...
%                         )...
%                     ), ...
%                 'remote', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file' ...
%                         )...
%                     )...
%             );

        
            % % primary config invalid type
%             c = struct('local', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', '/tmp/raphael'...
%                         ), 'type_config', ...
%                         struct(...
%                             'blob', struct(...
%                                 'subfolding', [3,4], ...
%                                 'cache', '/tmp/cache'...
%                             )...
%                         )...
%                     ), ...
%                 'remote', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', 10 ...
%                         )...
%                     )...
%             );

            % % secondary config invalid type
%             c = struct('local', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', '/tmp/raphael'...
%                         ), 'type_config', ...
%                         struct(...
%                             'blob', struct(...
%                                 'subfolding', [3,4.2], ...
%                                 'cache', '/tmp/cache'...
%                             )...
%                         )...
%                     ), ...
%                 'remote', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', '/tmp/john'...
%                         )...
%                     )...
%             );

            % % extra config
%             c = struct('local', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', '/tmp/raphael'...
%                         ), 'type_config', ...
%                         struct(...
%                             'blob', struct(...
%                                 'subfolding', [3,4], ...
%                                 'cache', '/tmp/cache',...
%                                 'stage', '/tmp/stage'...
%                             )...
%                         )...
%                     ), ...
%                 'remote', ...
%                     struct('store_config', ...
%                         struct(...
%                             'protocol', 'file', ...
%                             'location', '/tmp/john'...
%                         )...
%                     )...
%             );

            store_map = fieldnames(c);
            store_targets = struct();
            for k=1:numel(store_map)
                assert(isstruct(c.(store_map{k})), 'Store `%s` not configured as struct.', store_map{k});
                assert(any(strcmp('store_config', fieldnames(c.(store_map{k})))), 'Store `%s` missing `store_config` key.', store_map{k});
                assert(isstruct(c.(store_map{k}).store_config), 'Store `%s` set `store_config` as `%s` but expecting `struct`.', store_map{k}, class(c.(store_map{k}).store_config));
                assert(any(strcmp('protocol', fieldnames(c.(store_map{k}).store_config))), 'Store `%s` missing `store_config.protocol` key.', store_map{k});
                if isstring(c.(store_map{k}).store_config.protocol)
                    storePlugin = char(c.(store_map{k}).store_config.protocol);
                else
                    assert(ischar(c.(store_map{k}).store_config.protocol), 'Store `%s` set `store_config.protocol` as `%s` but expecting `char||string`.', store_map{k}, class(c.(store_map{k}).store_config.protocol));
                    storePlugin = c.(store_map{k}).store_config.protocol;
                end
                
                storePlugin(1) = upper(storePlugin(1));
                try
                    config = dj.internal.External.buildConfig(c.(store_map{k}), dj.store_plugins.(storePlugin).validation_config, store_map{k});
                    store_targets.(store_map{k}) = dj.store_plugins.(storePlugin)(config);
                catch ME
                    if strcmp(ME.identifier,'MATLAB:undefinedVarOrClass')
                        % Throw error if plugin not found
                        error('DataJoint:StorePlugin:Missing', ...
                            'Missing store plugin `%s`.', storePlugin);
                    else
                        rethrow(ME);
                    end
                end
            end
        end
    end
end
